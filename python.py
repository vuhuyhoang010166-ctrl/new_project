# -*- coding: utf-8 -*-
"""
T√™n ·ª©ng d·ª•ng: Tr√¨nh Ph√¢n T√≠ch Ph∆∞∆°ng √Ån Kinh Doanh
T√°c gi·∫£: Gemini AI (v·ªõi vai tr√≤ chuy√™n gia Python/Streamlit)
M√¥ t·∫£: ·ª®ng d·ª•ng Streamlit s·ª≠ d·ª•ng AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh t·ª´ file Word,
       t√≠nh to√°n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n (NPV, IRR, PP, DPP) v√† ƒë∆∞a ra ph√¢n t√≠ch.

Version: 2.0 - Refactored & Optimized
"""

import streamlit as st
from config import APP_TITLE, APP_ICON, PAGE_LAYOUT, UI_TEXTS
from utils import (
    DocumentReader,
    SessionStateManager,
    DataFormatter,
    get_api_key_from_secrets_or_input
)
from ai_service import get_ai_service
from financial_calculator import calculate_project_financials
from visualizations import ProjectVisualizer


# === C·∫§U H√åNH TRANG ===
st.set_page_config(
    page_title=APP_TITLE,
    page_icon=APP_ICON,
    layout=PAGE_LAYOUT
)

# === KH·ªûI T·∫†O SESSION STATE ===
SessionStateManager.initialize_session_state()

# === HEADER ===
st.title(f"{APP_ICON} {APP_TITLE} AI")
st.caption("T·∫£i l√™n ph∆∞∆°ng √°n kinh doanh d∆∞·ªõi d·∫°ng file Word (.docx) ƒë·ªÉ AI ph√¢n t√≠ch v√† ƒë√°nh gi√°.")


# === GIAO DI·ªÜN CH√çNH ===

# Layout: C·ªôt tr√°i (Upload file) v√† c·ªôt ph·∫£i (API Key)
col1, col2 = st.columns([3, 1])

with col1:
    uploaded_file = st.file_uploader(
        UI_TEXTS["upload_label"],
        type=['docx'],
        help="Ch·ªçn file .docx ch·ª©a ph∆∞∆°ng √°n kinh doanh c·ªßa b·∫°n"
    )

with col2:
    api_key = get_api_key_from_secrets_or_input()


# === X·ª¨ L√ù KHI C√ì FILE V√Ä API KEY ===
if uploaded_file is not None and api_key:

    # Ki·ªÉm tra n·∫øu file m·ªõi ƒë∆∞·ª£c upload (kh√°c file c≈©)
    if (st.session_state.uploaded_file_name != uploaded_file.name):
        st.session_state.uploaded_file_name = uploaded_file.name
        SessionStateManager.reset_all_state()

    # === B∆Ø·ªöC 1: TR√çCH XU·∫§T D·ªÆ LI·ªÜU ===
    st.markdown("---")
    st.subheader("üìÑ B∆∞·ªõc 1: Tr√≠ch xu·∫•t th√¥ng tin b·∫±ng AI")

    if st.button(UI_TEXTS["extract_button"], type="primary", use_container_width=True):
        with st.spinner(UI_TEXTS["extract_loading"]):
            # ƒê·ªçc n·ªôi dung file
            document_text = DocumentReader.extract_text_from_docx(uploaded_file)

            if document_text:
                # Kh·ªüi t·∫°o AI service
                ai_service = get_ai_service(api_key)

                if ai_service:
                    # G·ªçi AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu
                    success, data, error_msg = ai_service.extract_project_data(document_text)

                    if success and data:
                        st.session_state.project_data = data
                        SessionStateManager.reset_calculation_state()
                    else:
                        st.error(f"‚ùå L·ªói tr√≠ch xu·∫•t d·ªØ li·ªáu: {error_msg}")
            else:
                st.error("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung file. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file.")

    # === HI·ªÇN TH·ªä D·ªÆ LI·ªÜU ƒê√É TR√çCH XU·∫§T ===
    if st.session_state.project_data:
        st.success(UI_TEXTS["extract_success"])

        with st.expander("üëÅÔ∏è Xem d·ªØ li·ªáu AI ƒë√£ tr√≠ch xu·∫•t", expanded=True):
            p_data = st.session_state.project_data

            # Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng metrics
            metric_col1, metric_col2, metric_col3 = st.columns(3)

            with metric_col1:
                st.metric(
                    label="üí∞ V·ªën ƒë·∫ßu t∆∞",
                    value=DataFormatter.format_currency(p_data.get('von_dau_tu', 0))
                )
                st.metric(
                    label="üìä Doanh thu/nƒÉm",
                    value=DataFormatter.format_currency(p_data.get('doanh_thu_nam', 0))
                )

            with metric_col2:
                st.metric(
                    label="‚è±Ô∏è D√≤ng ƒë·ªùi d·ª± √°n",
                    value=f"{p_data.get('dong_doi_du_an', 0)} nƒÉm"
                )
                st.metric(
                    label="üí∏ Chi ph√≠/nƒÉm",
                    value=DataFormatter.format_currency(p_data.get('chi_phi_nam', 0))
                )

            with metric_col3:
                st.metric(
                    label="üìà WACC",
                    value=f"{p_data.get('wacc', 0)}%"
                )
                st.metric(
                    label="üè¢ Thu·∫ø su·∫•t TNDN",
                    value=f"{p_data.get('thue_suat', 0)}%"
                )

            # Cho ph√©p ng∆∞·ªùi d√πng ch·ªânh s·ª≠a d·ªØ li·ªáu
            if st.checkbox("‚úèÔ∏è Ch·ªânh s·ª≠a d·ªØ li·ªáu (n·∫øu AI tr√≠ch xu·∫•t sai)"):
                with st.form("edit_data_form"):
                    st.markdown("##### Ch·ªânh s·ª≠a th√¥ng tin d·ª± √°n")

                    edit_col1, edit_col2 = st.columns(2)

                    with edit_col1:
                        von_dau_tu = st.number_input(
                            "V·ªën ƒë·∫ßu t∆∞ (VNƒê)",
                            value=float(p_data.get('von_dau_tu', 0)),
                            min_value=0.0,
                            step=1000000.0
                        )
                        doanh_thu = st.number_input(
                            "Doanh thu/nƒÉm (VNƒê)",
                            value=float(p_data.get('doanh_thu_nam', 0)),
                            min_value=0.0,
                            step=1000000.0
                        )
                        chi_phi = st.number_input(
                            "Chi ph√≠/nƒÉm (VNƒê)",
                            value=float(p_data.get('chi_phi_nam', 0)),
                            min_value=0.0,
                            step=1000000.0
                        )

                    with edit_col2:
                        dong_doi = st.number_input(
                            "D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)",
                            value=int(p_data.get('dong_doi_du_an', 0)),
                            min_value=1,
                            max_value=100,
                            step=1
                        )
                        wacc = st.number_input(
                            "WACC (%)",
                            value=float(p_data.get('wacc', 0)),
                            min_value=0.0,
                            max_value=100.0,
                            step=0.1
                        )
                        thue_suat = st.number_input(
                            "Thu·∫ø su·∫•t (%)",
                            value=float(p_data.get('thue_suat', 0)),
                            min_value=0.0,
                            max_value=100.0,
                            step=0.1
                        )

                    if st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi", type="primary", use_container_width=True):
                        st.session_state.project_data = {
                            'von_dau_tu': von_dau_tu,
                            'dong_doi_du_an': dong_doi,
                            'doanh_thu_nam': doanh_thu,
                            'chi_phi_nam': chi_phi,
                            'wacc': wacc,
                            'thue_suat': thue_suat
                        }
                        SessionStateManager.reset_calculation_state()
                        st.success("‚úÖ ƒê√£ l∆∞u thay ƒë·ªïi! Vui l√≤ng cu·ªôn xu·ªëng ƒë·ªÉ xem k·∫øt qu·∫£ t√≠nh to√°n.")
                        st.rerun()

        # === B∆Ø·ªöC 2: T√çNH TO√ÅN C√ÅC CH·ªà S·ªê ===
        st.markdown("---")

        # T·ª± ƒë·ªông t√≠nh to√°n khi c√≥ d·ªØ li·ªáu
        if st.session_state.cash_flow_df is None and st.session_state.metrics is None:
            with st.spinner(UI_TEXTS["calculate_loading"]):
                df, metrics_data, error_msg = calculate_project_financials(st.session_state.project_data)

                if df is not None and metrics_data is not None:
                    st.session_state.cash_flow_df = df
                    st.session_state.metrics = metrics_data
                else:
                    st.error(f"‚ùå {error_msg}")

        # === HI·ªÇN TH·ªä B·∫¢NG D√íNG TI·ªÄN ===
        if st.session_state.cash_flow_df is not None:
            st.subheader("üìã B∆∞·ªõc 2: B·∫£ng D√≤ng Ti·ªÅn D·ª± √Ån")

            # ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã
            st.dataframe(
                st.session_state.cash_flow_df.style.format({
                    'Doanh thu': '{:,.0f}',
                    'Chi ph√≠': '{:,.0f}',
                    'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø': '{:,.0f}',
                    'Thu·∫ø TNDN': '{:,.0f}',
                    'L·ª£i nhu·∫≠n sau thu·∫ø': '{:,.0f}',
                    'D√≤ng ti·ªÅn thu·∫ßn (NCF)': '{:,.0f}',
                    'D√≤ng ti·ªÅn chi·∫øt kh·∫•u': '{:,.0f}',
                    'D√≤ng ti·ªÅn chi·∫øt kh·∫•u l≈©y k·∫ø': '{:,.0f}'
                }),
                use_container_width=True
            )

        # === HI·ªÇN TH·ªä C√ÅC CH·ªà S·ªê ===
        if st.session_state.metrics is not None:
            st.subheader("üìä B∆∞·ªõc 3: C√°c Ch·ªâ S·ªë ƒê√°nh Gi√° Hi·ªáu Qu·∫£ D·ª± √Ån")

            m = st.session_state.metrics
            indicator_cols = st.columns(4)

            with indicator_cols[0]:
                npv_color = "normal" if m['NPV'] >= 0 else "inverse"
                st.metric(
                    label="üíé NPV",
                    value=DataFormatter.format_currency(m['NPV']),
                    help="Gi√° tr·ªã hi·ªán t·∫°i r√≤ng - NPV > 0 l√† t·ªët"
                )

            with indicator_cols[1]:
                irr_display = (
                    DataFormatter.format_percentage(m['IRR'])
                    if isinstance(m['IRR'], float)
                    else m['IRR']
                )
                st.metric(
                    label="üìà IRR",
                    value=irr_display,
                    help="T·ª∑ su·∫•t ho√†n v·ªën n·ªôi b·ªô - IRR > WACC l√† t·ªët"
                )

            with indicator_cols[2]:
                pp_display = (
                    DataFormatter.format_year(m['PP'])
                    if isinstance(m['PP'], float)
                    else m['PP']
                )
                st.metric(
                    label="‚è±Ô∏è PP",
                    value=pp_display,
                    help="Th·ªùi gian ho√†n v·ªën - C√†ng ng·∫Øn c√†ng t·ªët"
                )

            with indicator_cols[3]:
                dpp_display = (
                    DataFormatter.format_year(m['DPP'])
                    if isinstance(m['DPP'], float)
                    else m['DPP']
                )
                st.metric(
                    label="‚åõ DPP",
                    value=dpp_display,
                    help="Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u"
                )

            # === TR·ª∞C QUAN H√ìA ===
            ProjectVisualizer.render_all_visualizations(
                st.session_state.cash_flow_df,
                st.session_state.metrics,
                st.session_state.project_data
            )

            # === B∆Ø·ªöC 4: PH√ÇN T√çCH T·ª™ AI ===
            st.markdown("---")
            st.subheader("ü§ñ B∆∞·ªõc 4: Ph√¢n T√≠ch Chuy√™n S√¢u t·ª´ AI")

            if st.button(UI_TEXTS["analyze_button"], type="primary", use_container_width=True):
                st.session_state.analysis_requested = True

            if st.session_state.analysis_requested:
                if st.session_state.ai_analysis_result is None:
                    with st.spinner(UI_TEXTS["analyze_loading"]):
                        ai_service = get_ai_service(api_key)

                        if ai_service:
                            success, analysis_text, error_msg = ai_service.analyze_metrics(
                                st.session_state.metrics
                            )

                            if success:
                                st.session_state.ai_analysis_result = analysis_text
                            else:
                                st.error(f"‚ùå {error_msg}")

                # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch
                if st.session_state.ai_analysis_result:
                    st.markdown("#### üìù **Nh·∫≠n ƒë·ªãnh t·ª´ Chuy√™n gia AI**")
                    st.info(st.session_state.ai_analysis_result)

else:
    # Hi·ªÉn th·ªã th√¥ng b√°o khi ch∆∞a c√≥ file ho·∫∑c API key
    st.info(UI_TEXTS["no_file_warning"])

    # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
    with st.expander("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
        st.markdown("""
        ### C√°ch s·ª≠ d·ª•ng ·ª©ng d·ª•ng:

        1. **Chu·∫©n b·ªã file**: T·∫°o file Word (.docx) ch·ª©a th√¥ng tin ph∆∞∆°ng √°n kinh doanh v·ªõi c√°c th√¥ng tin:
           - V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu
           - D√≤ng ƒë·ªùi d·ª± √°n (s·ªë nƒÉm)
           - Doanh thu h√†ng nƒÉm
           - Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm
           - WACC (t·ª∑ l·ªá chi·∫øt kh·∫•u)
           - Thu·∫ø su·∫•t

        2. **L·∫•y API Key**: Truy c·∫≠p [Google AI Studio](https://makersuite.google.com/app/apikey) ƒë·ªÉ l·∫•y API key mi·ªÖn ph√≠

        3. **Upload file**: T·∫£i file .docx l√™n ·ª©ng d·ª•ng

        4. **Nh·∫≠p API Key**: D√°n API key v√†o √¥ b√™n ph·∫£i (ho·∫∑c c·∫•u h√¨nh trong secrets)

        5. **Tr√≠ch xu·∫•t**: Nh·∫•n n√∫t "L·ªçc d·ªØ li·ªáu t·ª´ file Word"

        6. **Xem k·∫øt qu·∫£**: ·ª®ng d·ª•ng s·∫Ω t·ª± ƒë·ªông:
           - Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t
           - T√≠nh to√°n c√°c ch·ªâ s·ªë NPV, IRR, PP, DPP
           - V·∫Ω c√°c bi·ªÉu ƒë·ªì tr·ª±c quan
           - ƒê∆∞a ra ph√¢n t√≠ch t·ª´ AI

        ### C√°c ch·ªâ s·ªë t√†i ch√≠nh:

        - **NPV** (Net Present Value): Gi√° tr·ªã hi·ªán t·∫°i r√≤ng - D·ª± √°n kh·∫£ thi khi NPV > 0
        - **IRR** (Internal Rate of Return): T·ª∑ su·∫•t ho√†n v·ªën n·ªôi b·ªô - D·ª± √°n t·ªët khi IRR > WACC
        - **PP** (Payback Period): Th·ªùi gian ho√†n v·ªën - C√†ng ng·∫Øn c√†ng t·ªët
        - **DPP** (Discounted Payback Period): Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u
        """)


# === FOOTER ===
st.markdown("---")
st.caption("üí° Ph√°t tri·ªÉn b·ªüi AI | Powered by Gemini & Streamlit")
